name: Build for Windows

env:
  ACTIONS_RUNTIME_TOKEN: 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

# Controls when the workflow will run
on:
  # push:
    # # Sequence of patterns matched against refs/tags
    # tags:
    # - 'v*' # Push events to matching v*, i.e. v1.0, v20.15.10

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
    inputs:
      tags:
        description: 'Build tags'

jobs:
  build_windows:
    runs-on: windows-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Create virtual environment
        run: python -m venv toilet
        shell: powershell

      - name: Activate virtual environment
        run: .\toilet\Scripts\Activate.ps1
        shell: powershell

      - name: Install wxPython
        # run: pip install https://extras.wxpython.org/wxPython4/extras/linux/gtk3/ubuntu-20.04/wxPython-4.1.0-cp38-cp38-linux_x86_64.whl
        # run: pip install https://wxpython.org/Phoenix/snapshot-builds/wxPython-4.2.1a1.dev5564+33cabe97-cp37-cp37m-win_amd64.whl
        # run: pip install https://wxpython.org/Phoenix/snapshot-builds/wxPython-4.2.1a1.dev5564+33cabe97-cp38-cp38-win_amd64.whl
        # run: pip install https://wxpython.org/Phoenix/snapshot-builds/wxPython-4.2.1a1.dev5564+33cabe97-cp39-cp39-win_amd64.whl
        # run: pip install https://wxpython.org/Phoenix/snapshot-builds/wxPython-4.2.1a1.dev5564+33cabe97-cp310-cp310-win_amd64.whl
        run: pip install https://wxpython.org/Phoenix/snapshot-builds/wxPython-4.2.2a1.dev5594+f4db521a-cp311-cp311-win_amd64.whl


      - name: Install requirements
        run: pip install -r requirements.txt

      - name: List modules and their versions
        run: pip freeze

      - name: Build application
        run: .\build.bat

      - name: List contents of dist directory
        run: ls dist

      # Upload artifcats Windows to Actions
      - name: Upload Windows Artifact
        if: ${{ github.event_name == 'push' || github.event_name == 'workflow_dispatch' }} # Only run this step when running in GitHub Actions
        uses: actions/upload-artifact@v3
        id: upload_artifacts_windows
        with:
          name: PixelFlasher.exe
          path: dist/PixelFlasher.exe

      # Copy the artifact to a local directory
      - name: Copy Windows Artifact locally
        if: ${{ env.ACT }} # Only run this step when not running in GitHub Actions
        run: |
          cp dist/PixelFlasher dist/PixelFlasher.exe

      # Create a release
      - name: Create Release
        id: create_release
        # uses: actions/create-release@v1
        uses: ncipollo/release-action@v1.11.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          tag: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          name: Release ${{ github.ref }}
          allowUpdates: "true"
          draft: false
          prerelease: true

      # Upload the Windows artifact to the release
      - name: Upload Windows Artifact to release
        uses: shogo82148/actions-upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: dist/PixelFlasher.exe
          asset_name: PixelFlasher.exe
          asset_content_type: application/zip
          # asset_content_type: application/octet-stream
